# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:46:41+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, EmailStr, Field, RootModel, conint, constr


class Active(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(None, examples=[True], title='Is active')


class Type(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    office = 'office'
    shipping = 'shipping'
    billing = 'billing'
    other = 'other'


class Available(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(None, examples=[True], title='Available')


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time when the object was created.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Created at (timestamp)',
    )


class CreatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who created the object.',
        examples=['12345'],
        title='Created by',
    )


class Currency(Enum):
    UNKNOWN_CURRENCY = 'UNKNOWN_CURRENCY'
    AED = 'AED'
    AFN = 'AFN'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    ARS = 'ARS'
    AUD = 'AUD'
    AWG = 'AWG'
    AZN = 'AZN'
    BAM = 'BAM'
    BBD = 'BBD'
    BDT = 'BDT'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BOB = 'BOB'
    BOV = 'BOV'
    BRL = 'BRL'
    BSD = 'BSD'
    BTN = 'BTN'
    BWP = 'BWP'
    BYR = 'BYR'
    BZD = 'BZD'
    CAD = 'CAD'
    CDF = 'CDF'
    CHE = 'CHE'
    CHF = 'CHF'
    CHW = 'CHW'
    CLF = 'CLF'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    COU = 'COU'
    CRC = 'CRC'
    CUC = 'CUC'
    CUP = 'CUP'
    CVE = 'CVE'
    CZK = 'CZK'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    EGP = 'EGP'
    ERN = 'ERN'
    ETB = 'ETB'
    EUR = 'EUR'
    FJD = 'FJD'
    FKP = 'FKP'
    GBP = 'GBP'
    GEL = 'GEL'
    GHS = 'GHS'
    GIP = 'GIP'
    GMD = 'GMD'
    GNF = 'GNF'
    GTQ = 'GTQ'
    GYD = 'GYD'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HTG = 'HTG'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    INR = 'INR'
    IQD = 'IQD'
    IRR = 'IRR'
    ISK = 'ISK'
    JMD = 'JMD'
    JOD = 'JOD'
    JPY = 'JPY'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBP = 'LBP'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LTL = 'LTL'
    LVL = 'LVL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGA = 'MGA'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRO = 'MRO'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXN = 'MXN'
    MXV = 'MXV'
    MYR = 'MYR'
    MZN = 'MZN'
    NAD = 'NAD'
    NGN = 'NGN'
    NIO = 'NIO'
    NOK = 'NOK'
    NPR = 'NPR'
    NZD = 'NZD'
    OMR = 'OMR'
    PAB = 'PAB'
    PEN = 'PEN'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PYG = 'PYG'
    QAR = 'QAR'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDG = 'SDG'
    SEK = 'SEK'
    SGD = 'SGD'
    SHP = 'SHP'
    SLL = 'SLL'
    SOS = 'SOS'
    SRD = 'SRD'
    SSP = 'SSP'
    STD = 'STD'
    SVC = 'SVC'
    SYP = 'SYP'
    SZL = 'SZL'
    THB = 'THB'
    TJS = 'TJS'
    TMT = 'TMT'
    TND = 'TND'
    TOP = 'TOP'
    TRC = 'TRC'
    TRY = 'TRY'
    TTD = 'TTD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UGX = 'UGX'
    USD = 'USD'
    USN = 'USN'
    USS = 'USS'
    UYI = 'UYI'
    UYU = 'UYU'
    UZS = 'UZS'
    VEF = 'VEF'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XAG = 'XAG'
    XAU = 'XAU'
    XBA = 'XBA'
    XBB = 'XBB'
    XBC = 'XBC'
    XBD = 'XBD'
    XCD = 'XCD'
    XDR = 'XDR'
    XOF = 'XOF'
    XPD = 'XPD'
    XPF = 'XPF'
    XPT = 'XPT'
    XTS = 'XTS'
    XXX = 'XXX'
    YER = 'YER'
    ZAR = 'ZAR'
    ZMK = 'ZMK'
    ZMW = 'ZMW'
    BTC = 'BTC'
    ETH = 'ETH'


class CustomField(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        None,
        description='More information about the custom field',
        examples=['Employee Level'],
        title='Description',
    )
    id: str = Field(..., examples=['2389328923893298'], title='ID')
    name: Optional[str] = Field(
        None,
        description='Name of the custom field.',
        examples=['employee_level'],
        title='Name',
    )
    value: Optional[Union[str, float, bool, List[str]]] = None


class Deleted(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(None, examples=[True], title='Deleted')


class Type1(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    billing = 'billing'
    other = 'other'


class Email(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: EmailStr = Field(..., examples=['elon@musk.com'])
    id: Optional[str] = Field(None, examples=['123'])
    type: Optional[Type1] = Field(None, examples=['primary'])


class Hidden(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(None, examples=[True], title='Hidden')


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )


class IdempotencyKey(RootModel[constr(max_length=45)]):
    root: constr(max_length=45) = Field(
        ...,
        description='A value you specify that uniquely identifies this request among requests you have sent.',
        examples=['random_string'],
    )


class Category(BaseModel):
    id: Optional[Id] = None
    image_ids: Optional[List[Id]] = None
    name: Optional[str] = None


class ModifierGroup1(BaseModel):
    id: Optional[Id] = None


class Option(BaseModel):
    attribute_id: Optional[str] = Field(None, examples=['12345'], title='Attribute ID')
    id: Optional[str] = Field(None, examples=['12345'])
    name: Optional[str] = Field(None, examples=['Option 1'], title='Name')


class PricingType(Enum):
    fixed = 'fixed'
    variable = 'variable'
    per_unit = 'per_unit'
    other = 'other'


class ProductType(Enum):
    regular = 'regular'
    other = 'other'


class PricingType1(Enum):
    fixed = 'fixed'
    variable = 'variable'
    other = 'other'


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Status(Enum):
    active = 'active'
    inactive = 'inactive'
    other = 'other'


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class Modifier1(BaseModel):
    alternate_name: Optional[str] = Field(
        None, examples=['Modifier New'], title='Alternate name'
    )
    available: Optional[Available] = None
    currency: Optional[Currency] = None
    id: Optional[str] = Field(None, examples=['12345'], title='ID')
    name: Optional[str] = Field(None, examples=['Modifier'], title='Name')
    price_amount: Optional[float] = Field(None, examples=[10], title='Price amount')


class SelectionType(Enum):
    single = 'single'
    multiple = 'multiple'


class ModifierGroupFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    modifier_group_id: Optional[str] = Field(
        None, description='Id of the job to filter on', examples=['1234']
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class NotImplementedResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Implemented'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unmapped Attribute'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#mappingerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[501]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['MappingError']
    )


class Scope(Enum):
    order = 'order'
    line_item = 'line_item'


class Type2(Enum):
    percentage = 'percentage'
    flat_fee = 'flat_fee'


class Discount(BaseModel):
    amount: Optional[int] = Field(None, examples=[27500], title='Amount (in cents)')
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    name: Optional[str] = Field(None, examples=['10% off'])
    product_id: Optional[Id] = None
    scope: Optional[Scope] = Field(None, examples=['order'])
    type: Optional[Type2] = Field(None, examples=['percentage'])


class CurbsidePickupDetails(BaseModel):
    buyer_arrived_at: Optional[datetime] = Field(
        None,
        description='Indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z").',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    curbside_details: Optional[constr(max_length=250)] = Field(
        None,
        description='Specific details for curbside pickup, such as parking number and vehicle model.',
    )


class ScheduleType(Enum):
    scheduled = 'scheduled'


class Status2(Enum):
    proposed = 'proposed'
    reserved = 'reserved'
    prepared = 'prepared'
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'
    other = 'other'


class Type3(Enum):
    pickup = 'pickup'
    shipment = 'shipment'


class AppliedDiscount(BaseModel):
    amount: Optional[int] = Field(None, examples=[27500], title='Amount (in cents)')
    currency: Optional[Currency] = None
    discount_id: Optional[str] = Field(None, examples=['12345'])
    id: Optional[Id] = None


class AppliedTax(BaseModel):
    amount: Optional[int] = Field(None, examples=[27500], title='Amount (in cents)')
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    tax_id: Optional[str] = Field(None, examples=['sales-tax'])


class Item1(BaseModel):
    id: Optional[Id] = None


class Modifier2(BaseModel):
    alternate_name: Optional[str] = Field(
        None, examples=['Modifier New'], title='Alternate name'
    )
    amount: Optional[int] = Field(None, examples=[27500], title='Amount (in cents)')
    currency: Optional[Currency] = None
    id: Optional[str] = Field(None, examples=['12345'])
    modifier_group_id: Optional[str] = Field(
        None, examples=['123'], title='Modifier group ID'
    )
    name: Optional[str] = Field(None, examples=['New York Strip Steak - no cheese'])


class PaymentStatus(Enum):
    open = 'open'
    paid = 'paid'
    refunded = 'refunded'
    credited = 'credited'
    partially_paid = 'partially_paid'
    partially_refunded = 'partially_refunded'
    unknown = 'unknown'


class Payment(BaseModel):
    amount: Optional[int] = Field(None, examples=[27500], title='Amount (in cents)')
    currency: Optional[Currency] = None
    id: Optional[Id] = None


class Status3(Enum):
    pending = 'pending'
    approved = 'approved'
    rejected = 'rejected'
    failed = 'failed'


class Refund(BaseModel):
    amount: Optional[int] = Field(None, examples=[27500], title='Amount (in cents)')
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    location_id: Optional[Id] = None
    reason: Optional[str] = Field(
        None, examples=['The reason for the refund being issued.']
    )
    status: Optional[Status3] = None
    tender_id: Optional[Id] = None
    transaction_id: Optional[Id] = None


class Source(Enum):
    in_store = 'in-store'
    online = 'online'
    opt = 'opt'
    api = 'api'
    kiosk = 'kiosk'
    caller_id = 'caller-id'
    google = 'google'
    invoice = 'invoice'


class Status4(Enum):
    open = 'open'
    draft = 'draft'
    delivered = 'delivered'
    delayed = 'delayed'
    voided = 'voided'
    completed = 'completed'
    hidden = 'hidden'


class Type4(Enum):
    unknown = 'unknown'
    additive = 'additive'
    inclusive = 'inclusive'


class CardEntryMethod(Enum):
    evm = 'evm'
    swiped = 'swiped'
    keyed = 'keyed'
    on_file = 'on-file'
    contactless = 'contactless'


class CardStatus(Enum):
    authorized = 'authorized'
    captured = 'captured'
    failed = 'failed'
    voided = 'voided'


class Type5(Enum):
    cash = 'cash'
    card = 'card'
    other = 'other'


class CardBrand(Enum):
    visa = 'visa'
    mastercard = 'mastercard'
    amex = 'amex'
    discover = 'discover'
    discover_diners = 'discover-diners'
    jcb = 'jcb'
    china_unionpay = 'china-unionpay'
    square_gift_card = 'square-gift-card'
    square_capital_card = 'square-capital-card'
    interac = 'interac'
    eftpos = 'eftpos'
    felica = 'felica'
    ebt = 'ebt'
    other = 'other'


class CardType(Enum):
    credit = 'credit'
    debit = 'debit'
    prepaid = 'prepaid'
    other = 'other'


class PrepaidType(Enum):
    non_prepaid = 'non-prepaid'
    prepaid = 'prepaid'
    unknown = 'unknown'


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class Percentage(RootModel[float]):
    root: float = Field(..., examples=[15], title='Percentage')


class Type6(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    work = 'work'
    office = 'office'
    mobile = 'mobile'
    assistant = 'assistant'
    fax = 'fax'
    direct_dial_in = 'direct-dial-in'
    personal = 'personal'
    other = 'other'


class PhoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    area_code: Optional[str] = Field(None, examples=['323'], title='Area code')
    country_code: Optional[str] = Field(None, examples=['1'], title='Country code')
    extension: Optional[str] = Field(None, examples=['105'], title='Phone extension')
    id: Optional[str] = Field(None, examples=['12345'])
    number: constr(min_length=1) = Field(
        ..., examples=['111-111-1111'], title='Phone number'
    )
    type: Optional[Type6] = Field(None, examples=['primary'])


class AchDetails(BaseModel):
    account_number_suffix: Optional[constr(max_length=4)] = Field(
        None, description='The last few digits of the bank account number.'
    )
    account_type: Optional[constr(max_length=50)] = Field(
        None,
        description='The type of the bank account performing the transfer. The account type can be `CHECKING`,\n`SAVINGS`, or `UNKNOWN`.',
    )
    routing_number: Optional[constr(max_length=50)] = Field(
        None, description='The routing number for the bank account.'
    )


class PosBankAccount(BaseModel):
    account_ownership_type: Optional[constr(max_length=50)] = Field(
        None,
        description='The ownership type of the bank account performing the transfer.\nThe type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.',
    )
    ach_details: Optional[AchDetails] = Field(
        None,
        description='ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.',
    )
    bank_name: Optional[constr(max_length=100)] = Field(
        None, description='The name of the bank associated with the bank account.'
    )
    country: Optional[constr(min_length=2, max_length=2)] = Field(
        None,
        description='Country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
        title='Country Code',
    )
    fingerprint: Optional[constr(max_length=255)] = Field(
        None,
        description='Uniquely identifies the bank account for this seller and can be used\nto determine if payments are from the same bank account.',
    )
    statement_description: Optional[constr(max_length=1000)] = Field(
        None, description='The statement description as sent to the bank.'
    )
    transfer_type: Optional[constr(max_length=50)] = Field(
        None,
        description='The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.',
    )


class Cash(BaseModel):
    amount: Optional[Any] = Field(
        None, description='The amount of cash given by the customer.'
    )
    charge_back_amount: Optional[Any] = Field(
        None,
        description='The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.',
    )


class Type7(Enum):
    check = 'check'
    bank_transfer = 'bank_transfer'
    other_gift_card = 'other_gift_card'
    crypto = 'crypto'
    square_cash = 'square_cash'
    social = 'social'
    external = 'external'
    emoney = 'emoney'
    card = 'card'
    stored_balance = 'stored_balance'
    food_voucher = 'food_voucher'
    other = 'other'


class ExternalDetails(BaseModel):
    source: constr(max_length=255) = Field(
        ...,
        description='A description of the external payment source. For example, \n"Food Delivery Service".',
    )
    source_fee_amount: Optional[float] = Field(
        None,
        description='The fees paid to the source. The amount minus this field is the net amount seller receives.',
        examples=[2.5],
        title='Source fee',
    )
    source_id: Optional[constr(max_length=255)] = Field(
        None, description='An ID to associate the payment to its originating source.'
    )
    type: Type7 = Field(
        ...,
        description='The type of external payment the seller received. It can be one of the following:\n- CHECK - Paid using a physical check.\n- BANK_TRANSFER - Paid using external bank transfer.\n- OTHER\\_GIFT\\_CARD - Paid using a non-Square gift card.\n- CRYPTO - Paid using a crypto currency.\n- SQUARE_CASH - Paid using Square Cash App.\n- SOCIAL - Paid using peer-to-peer payment applications.\n- EXTERNAL - A third-party application gathered this payment outside of Square.\n- EMONEY - Paid using an E-money provider.\n- CARD - A credit or debit card that Square does not support.\n- STORED_BALANCE - Use for house accounts, store credit, and so forth.\n- FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals\n- OTHER - A type not listed here.',
    )


class ProcessingType(Enum):
    initial = 'initial'
    adjustment = 'adjustment'


class ProcessingFee(BaseModel):
    amount: Optional[float] = Field(None, examples=[1.05], title='Amount (in cents)')
    effective_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z'], title='Effective at (timestamp)'
    )
    processing_type: Optional[ProcessingType] = Field(None, title='Type')


class Source1(Enum):
    card = 'card'
    bank_account = 'bank_account'
    wallet = 'wallet'
    bnpl = 'bnpl'
    cash = 'cash'
    external = 'external'
    other = 'other'


class Status5(Enum):
    approved = 'approved'
    pending = 'pending'
    completed = 'completed'
    canceled = 'canceled'
    failed = 'failed'
    other = 'other'


class Status6(Enum):
    authorized = 'authorized'
    captured = 'captured'
    voided = 'voided'
    failed = 'failed'
    other = 'other'


class Wallet(BaseModel):
    status: Optional[Status6] = Field(
        None,
        description='The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.',
    )


class EventType(Enum):
    pos_order_created = 'pos.order.created'
    pos_order_updated = 'pos.order.updated'
    pos_order_deleted = 'pos.order.deleted'
    pos_payment_created = 'pos.payment.created'
    pos_payment_updated = 'pos.payment.updated'
    pos_payment_deleted = 'pos.payment.deleted'
    pos_merchant_created = 'pos.merchant.created'
    pos_merchant_updated = 'pos.merchant.updated'
    pos_merchant_deleted = 'pos.merchant.deleted'
    pos_location_created = 'pos.location.created'
    pos_location_updated = 'pos.location.updated'
    pos_location_deleted = 'pos.location.deleted'
    pos_item_created = 'pos.item.created'
    pos_item_updated = 'pos.item.updated'
    pos_item_deleted = 'pos.item.deleted'
    pos_modifier_created = 'pos.modifier.created'
    pos_modifier_updated = 'pos.modifier.updated'
    pos_modifier_deleted = 'pos.modifier.deleted'
    pos_modifier_group_created = 'pos.modifier-group.created'
    pos_modifier_group_updated = 'pos.modifier-group.updated'
    pos_modifier_group_deleted = 'pos.modifier-group.deleted'


class PosWebhookEvent(BaseModel):
    entity_id: Optional[str] = Field(
        None,
        description="The service provider's ID of the entity that triggered this event",
        examples=['123456ASDF'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='The type entity that triggered this event',
        examples=['Company'],
    )
    entity_url: Optional[str] = Field(
        None,
        description='The url to retrieve entity detail.',
        examples=['https://unify.apideck.com/crm/contacts/123456'],
    )
    event_id: Optional[str] = Field(
        None,
        description='Unique reference to this request event',
        examples=['9755c355-56c3-4a2f-a2da-86ff4411fccb'],
    )
    execution_attempt: Optional[float] = Field(
        None,
        description='The current count this request event has been attempted',
        examples=[2],
    )
    occurred_at: Optional[str] = Field(
        None,
        description='ISO Datetime for when the original event occurred',
        examples=['2021-10-01T03:14:55.419Z'],
    )
    service_id: Optional[str] = Field(
        None, description='Service provider identifier', examples=['close']
    )
    event_type: Optional[EventType] = Field(None, examples=['pos.order.created'])


class Quantity(RootModel[Optional[float]]):
    root: Optional[float] = Field(None, examples=[1], title='Quantity')


class RowVersion(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.',
        examples=['1-12345'],
        title='Row version',
    )


class Sequence(RootModel[Optional[float]]):
    root: Optional[float] = Field(None, examples=[1], title='Sequence')


class Type8(Enum):
    auto_gratuity = 'auto_gratuity'
    custom = 'custom'


class ServiceCharge(BaseModel):
    active: Optional[Active] = None
    amount: Optional[float] = Field(None, examples=[27500], title='Amount (in cents)')
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None, description='Service charge name', examples=['Charge for delivery']
    )
    percentage: Optional[float] = Field(
        None,
        description='Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.',
        examples=[12.5],
    )
    type: Optional[Type8] = Field(None, description='The type of the service charge.')


class ServiceCharges(RootModel[List[ServiceCharge]]):
    root: List[ServiceCharge] = Field(
        ...,
        description='Optional service charges or gratuity tip applied to the order.',
    )


class SocialLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[str] = Field(None, examples=['twitter'])
    url: constr(min_length=1) = Field(
        ..., examples=['https://www.twitter.com/apideck-io']
    )


class Tags(RootModel[List[str]]):
    root: List[str] = Field(..., examples=[['New']])


class Detail(BaseModel):
    context: Optional[str] = None
    error: Optional[Dict[str, Any]] = None


class TooManyRequestsResponse(BaseModel):
    detail: Optional[Detail] = None
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)',
        examples=['Too Many Requests'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Connector Rate Limit Error'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#connectorratelimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[429]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['ConnectorRateLimitError'],
    )


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedId(BaseModel):
    id: str = Field(
        ...,
        description='The unique identifier of the resource',
        examples=['12345'],
        title='Id',
    )


class UnitPrice(RootModel[Optional[float]]):
    root: Optional[float] = Field(None, examples=[27500.5], title='Unit price')


class UnprocessableResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Unprocessable request, please verify your request headers and body.'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unprocessable Entity'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid State'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#invalidstateerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[422]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['InvalidStateError']
    )


class UpdateItemResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateLocationResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Locations']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateMerchantResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Merchants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateModifierGroupResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ModifierGroups']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateModifierResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Modifiers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateOrderResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['orders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateOrderTypeResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['OrderTypes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdatePosPaymentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['PosPayments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateTenderResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tenders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdatedAt(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        None,
        description='The date and time when the object was last updated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Updated at (timestamp)',
    )


class UpdatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who last updated the object.',
        examples=['12345'],
        title='Updated by',
    )


class Version(RootModel[Optional[str]]):
    root: Optional[str] = Field(None, examples=['230320320320'], title='Version')


class Type9(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    other = 'other'


class Website(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[Type9] = Field(None, examples=['primary'])
    url: constr(min_length=1) = Field(..., examples=['http://example.com'])


class Address(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    city: Optional[str] = Field(
        None, description='Name of city.', examples=['San Francisco']
    )
    contact_name: Optional[str] = Field(None, examples=['Elon Musk'])
    country: Optional[str] = Field(
        None,
        description='country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
    )
    county: Optional[str] = Field(
        None,
        description='Address field that holds a sublocality, such as a county',
        examples=['Santa Clara'],
    )
    email: Optional[str] = Field(None, examples=['elon@musk.com'])
    fax: Optional[str] = Field(None, examples=['122-111-1111'])
    id: Optional[str] = Field(None, examples=['123'])
    latitude: Optional[str] = Field(None, examples=['40.759211'])
    line1: Optional[str] = Field(
        None,
        description='Line 1 of the address e.g. number, street, suite, apt #, etc.',
        examples=['Main street'],
    )
    line2: Optional[str] = Field(
        None, description='Line 2 of the address', examples=['apt #']
    )
    line3: Optional[str] = Field(
        None, description='Line 3 of the address', examples=['Suite #']
    )
    line4: Optional[str] = Field(
        None, description='Line 4 of the address', examples=['delivery instructions']
    )
    longitude: Optional[str] = Field(None, examples=['-73.984638'])
    name: Optional[str] = Field(None, examples=['HQ US'])
    phone_number: Optional[str] = Field(None, examples=['111-111-1111'])
    postal_code: Optional[str] = Field(
        None, description='Zip code or equivalent.', examples=['94104']
    )
    row_version: Optional[RowVersion] = None
    salutation: Optional[str] = Field(None, examples=['Mr'])
    state: Optional[str] = Field(None, description='Name of state', examples=['CA'])
    street_number: Optional[str] = Field(
        None, description='Street number', examples=['25']
    )
    string: Optional[str] = Field(
        None,
        examples=['25 Spring Street, Blackburn, VIC 3130'],
        title="The address string. Some APIs don't provide structured address data.",
    )
    type: Optional[Type] = Field(None, examples=['primary'])
    website: Optional[str] = Field(None, examples=['https://elonmusk.com'])


class CreateItemResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateLocationResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Locations']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateMerchantResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Merchants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateModifierGroupResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ModifierGroups']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateModifierResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Modifiers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateOrderResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['orders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateOrderTypeResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['OrderTypes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreatePosPaymentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['PosPayments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateTenderResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tenders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteItemResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteLocationResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Locations']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteMerchantResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Merchants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteModifierGroupResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ModifierGroups']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteModifierResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Modifiers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteOrderResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['orders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteOrderTypeResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['OrderTypes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeletePosPaymentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['PosPayments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteTenderResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tenders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Variation(BaseModel):
    created_at: Optional[CreatedAt] = None
    id: Optional[Id] = None
    item_id: Optional[Id] = None
    name: Optional[str] = Field(None, examples=['Variation'], title='Name')
    present_at_all_locations: Optional[bool] = Field(
        None, examples=[False], title='Present at all locations'
    )
    price_amount: Optional[float] = Field(None, examples=[10], title='Price amount')
    price_currency: Optional[Currency] = None
    pricing_type: Optional[PricingType1] = Field(
        None, examples=['fixed'], title='Pricing type'
    )
    sequence: Optional[Sequence] = None
    sku: Optional[str] = Field(None, examples=['11910345'], title='SKU')
    stockable: Optional[bool] = Field(None, examples=[False], title='Stockable')
    updated_at: Optional[UpdatedAt] = None
    version: Optional[UpdatedBy] = None


class Item(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    abbreviation: Optional[str] = Field(None, examples=['Ch'], title='Abbreviation')
    absent_at_location_ids: Optional[List[str]] = Field(
        None,
        description='A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.',
        examples=[['12345', '67890']],
    )
    available: Optional[Available] = None
    available_for_pickup: Optional[bool] = Field(
        None,
        examples=[False],
        title="If true, the item can be added to pickup orders from the merchant's online store.",
    )
    available_online: Optional[bool] = Field(
        None,
        examples=[False],
        title="If true, the item can be added to shipping orders from the merchant's online store.",
    )
    categories: Optional[List[Category]] = Field(
        None,
        examples=[[{'id': '12345', 'image_ids': ['12345', '67890'], 'name': 'Food'}]],
        title='Categories',
    )
    code: Optional[str] = Field(
        None,
        description='Product code, e.g. UPC or EAN',
        examples=['11910345'],
        title='SKU',
    )
    cost: Optional[float] = Field(None, examples=[2], title='Cost')
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    deleted: Optional[Deleted] = None
    description: Optional[str] = Field(
        None, examples=['Hot Chocolate'], title='Description'
    )
    hidden: Optional[Hidden] = None
    id: Optional[str] = Field(None, examples=['#cocoa'])
    idempotency_key: Optional[IdempotencyKey] = None
    modifier_groups: Optional[List[ModifierGroup1]] = Field(
        None, examples=[[{'id': '12345'}]], title='Variations'
    )
    name: str = Field(..., examples=['Cocoa'], title='Name')
    options: Optional[List[Option]] = Field(
        None,
        description="List of options pertaining to this item's attribute variation",
    )
    present_at_all_locations: Optional[bool] = Field(
        None, examples=[False], title='Present at all locations'
    )
    price_amount: Optional[float] = Field(None, examples=[10], title='Price amount')
    price_currency: Optional[Currency] = None
    pricing_type: Optional[PricingType] = Field(
        None, examples=['fixed'], title='Pricing type'
    )
    product_type: Optional[ProductType] = Field(
        None, examples=['regular'], title='Product type'
    )
    sku: Optional[str] = Field(
        None, description='SKU of the item', examples=['11910345'], title='SKU'
    )
    tax_ids: Optional[List[str]] = Field(
        None,
        description='A list of Tax IDs for the product.',
        examples=[['12345', '67890']],
        title='Tax IDs',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    variations: Optional[List[Variation]] = Field(
        None,
        examples=[
            [
                {
                    'id': '12345',
                    'image_ids': ['12345', '67890'],
                    'item_id': '12345',
                    'name': 'Food',
                    'price_amount': 10,
                    'price_currency': 'USD',
                    'pricing_type': 'fixed',
                    'sequence': 0,
                    'sku': '11910345',
                }
            ]
        ],
        title='Variations',
    )
    version: Optional[UpdatedBy] = None


class Location(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address: Optional[Address] = None
    business_name: Optional[str] = Field(
        None,
        description='The business name of the location',
        examples=['Dunkin Donuts LLC'],
        title='name',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    merchant_id: Optional[str] = Field(None, examples=['12345'])
    name: Optional[str] = Field(
        None,
        description='The name of the location',
        examples=['Dunkin Donuts'],
        title='name',
    )
    status: Optional[Status] = Field(
        None,
        description='Status of this location.',
        examples=['active'],
        title='Status',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class Merchant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address: Optional[Address] = None
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    language: Optional[str] = Field(
        None,
        description='language code according to ISO 639-1. For the United States - EN',
        examples=['EN'],
    )
    main_location_id: Optional[str] = Field(
        None,
        description='The main location ID of the merchant',
        examples=['12345'],
        title='Main location ID',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the merchant',
        examples=['Dunkin Donuts'],
        title='name',
    )
    owner_id: Optional[str] = Field(None, examples=['12345'], title='Owner ID')
    service_charges: Optional[List[ServiceCharge]] = None
    status: Optional[Status] = Field(
        None,
        description='Status of this merchant.',
        examples=['active'],
        title='Status',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class Modifier(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    alternate_name: Optional[str] = Field(
        None, examples=['Modifier New'], title='Alternate name'
    )
    available: Optional[Available] = None
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    idempotency_key: Optional[IdempotencyKey] = None
    modifier_group_id: str = Field(..., examples=['123'], title='Modifier group ID')
    name: str = Field(..., examples=['Modifier'], title='Name')
    price_amount: Optional[float] = Field(None, examples=[10], title='Price amount')
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class ModifierGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    alternate_name: Optional[str] = Field(
        None, examples=['Modifier New'], title='Alternate name'
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    deleted: Optional[Deleted] = None
    id: Optional[Id] = None
    maximum_allowed: Optional[int] = Field(None, examples=[5], title='Maximum allowed')
    minimum_required: Optional[int] = Field(
        None, examples=[1], title='Minimum required'
    )
    modifiers: Optional[List[Modifier1]] = None
    name: Optional[str] = Field(None, examples=['Modifier'], title='Name')
    present_at_all_locations: Optional[bool] = Field(
        None, examples=[False], title='Present at all locations'
    )
    row_version: Optional[RowVersion] = None
    selection_type: Optional[SelectionType] = Field(
        None,
        examples=['single'],
        title='Indicates whether multiple options from the modifier group can be applied to a single or multiple modifiers',
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class Customer(BaseModel):
    emails: Optional[List[Email]] = None
    first_name: Optional[str] = Field(None, examples=['Elon'])
    id: Optional[str] = Field(None, examples=['12345'], title='Customer ID')
    last_name: Optional[str] = Field(None, examples=['Musk'])
    middle_name: Optional[str] = Field(None, examples=['D.'])
    phone_numbers: Optional[List[PhoneNumber]] = None


class Recipient(BaseModel):
    address: Optional[Address] = None
    customer_id: Optional[str] = Field(None, examples=['12345'])
    display_name: Optional[str] = Field(
        None, examples=['Elon Musk'], title='Display name'
    )
    email: Optional[Email] = None
    phone_number: Optional[PhoneNumber] = None


class PickupDetails(BaseModel):
    accepted_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z'], title='Accepted at (timestamp)'
    )
    auto_complete_duration: Optional[str] = Field(
        None,
        description="The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').",
        examples=['P1W3D'],
    )
    cancel_reason: Optional[str] = Field(
        None,
        description='A description of why the pickup was canceled.',
        examples=['Not hungry'],
    )
    canceled_at: Optional[datetime] = Field(
        None,
        description='Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z").',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    curbside_pickup_details: Optional[CurbsidePickupDetails] = Field(
        None, description='Specific details for curbside pickup.'
    )
    expired_at: Optional[datetime] = Field(
        None,
        description='Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z").',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    expires_at: Optional[datetime] = Field(
        None,
        description='Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.\nIf `expires_at` is not set, this pickup fulfillment is automatically accepted when \nplaced.',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    is_curbside_pickup: Optional[bool] = Field(
        None,
        description='If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.',
    )
    note: Optional[str] = Field(
        None,
        description='A note meant to provide additional instructions about the pickup\nfulfillment displayed in the Square Point of Sale application and set by the API.',
        examples=['Pickup in the back.'],
    )
    picked_up_at: Optional[datetime] = Field(
        None,
        description='Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z").',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    pickup_at: Optional[datetime] = Field(
        None,
        description='The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., \n"2016-09-04T23:59:33.123Z".\n\nFor fulfillments with the schedule type `ASAP`, this is automatically set\nto the current time plus the expected duration to prepare the fulfillment.',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    pickup_window_duration: Optional[str] = Field(
        None,
        description='The window of time in which the order should be picked up after the `pickup_at` timestamp.\nMust be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an\ninformational guideline for merchants.',
        examples=['P1W3D'],
    )
    placed_at: Optional[datetime] = Field(
        None,
        description='Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z").',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    prep_time_duration: Optional[str] = Field(
        None,
        description='The duration of time it takes to prepare this fulfillment.\nThe duration must be in RFC 3339 format (for example, "P1W3D").',
        examples=['P1W3D'],
    )
    ready_at: Optional[datetime] = Field(
        None,
        description='Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z").',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    recipient: Optional[Recipient] = None
    rejected_at: Optional[datetime] = Field(
        None,
        description='Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format\n(for example, "2016-09-04T23:59:33.123Z").',
        examples=['2016-09-04T23:59:33.123Z'],
    )
    schedule_type: Optional[ScheduleType] = Field(
        None, description='The schedule type of the pickup fulfillment.'
    )


class Fulfillment(BaseModel):
    id: Optional[str] = Field(None, examples=['12345'])
    pickup_details: Optional[PickupDetails] = None
    shipment_details: Optional[Dict[str, Any]] = None
    status: Optional[Status2] = Field(
        None, description='The state of the fulfillment.', title='Fulfillment status'
    )
    type: Optional[Type3] = Field(None, examples=['shipment'])


class LineItem(BaseModel):
    applied_discounts: Optional[List[AppliedDiscount]] = None
    applied_taxes: Optional[List[AppliedTax]] = None
    id: Optional[Id] = None
    item: Optional[Item1] = None
    modifiers: Optional[List[Modifier2]] = Field(
        None,
        description='Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts',
    )
    name: Optional[str] = Field(None, examples=['New York Strip Steak'])
    quantity: Optional[Quantity] = None
    total_amount: Optional[int] = Field(
        None, examples=[27500], title='Total amount (in cents)'
    )
    total_discount: Optional[int] = Field(
        None, examples=[3000], title='Total discount amount (in cents)'
    )
    total_tax: Optional[int] = Field(
        None, examples=[2000], title='Tax amount (in cents)'
    )
    unit_price: Optional[UnitPrice] = None


class Tax(BaseModel):
    amount: Optional[int] = Field(None, examples=[27500], title='Amount (in cents)')
    auto_applied: Optional[bool] = Field(
        None,
        description='Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()',
        examples=[True],
    )
    currency: Optional[Currency] = None
    id: Optional[str] = Field(None, examples=['state-sales-tax'])
    name: Optional[str] = Field(
        None, description="The tax's name.", examples=['State Sales Tax']
    )
    percentage: Optional[Percentage] = None
    scope: Optional[Scope] = None
    type: Optional[Type4] = None


class OrderType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    default: Optional[bool] = Field(None, examples=[True], title='Default')
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None, examples=['Default order type'], title='Order type name'
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class PaymentCard(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    billing_address: Optional[Address] = None
    bin: Optional[str] = Field(
        None,
        description='The first six digits of the card number, known as the Bank Identification Number (BIN).',
        examples=['41111'],
    )
    card_brand: Optional[CardBrand] = Field(
        None,
        description='The first six digits of the card number, known as the Bank Identification Number (BIN).',
    )
    card_type: Optional[CardType] = Field(None, examples=['credit'])
    cardholder_name: Optional[str] = Field(None, examples=['John Doe'])
    customer_id: Optional[str] = Field(None, examples=['12345'])
    enabled: Optional[bool] = Field(
        None,
        description='Indicates whether or not a card can be used for payments.',
        examples=[True],
    )
    exp_month: Optional[conint(ge=1, le=12)] = Field(
        None,
        description='The expiration month of the associated card as an integer between 1 and 12.',
        examples=[1],
    )
    exp_year: Optional[int] = Field(
        None,
        description="The four-digit year of the card's expiration date.",
        examples=[2022],
    )
    fingerprint: Optional[str] = Field(
        None,
        examples=[
            ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.'
        ],
    )
    id: Optional[Id] = None
    last_4: Optional[str] = Field(
        None, examples=['The last 4 digits of the card number.']
    )
    merchant_id: Optional[str] = Field(None, examples=['12345'])
    prepaid_type: Optional[PrepaidType] = Field(None, examples=['prepaid'])
    reference_id: Optional[str] = Field(
        None,
        description='An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.',
        examples=['card-001'],
        title='Reference ID',
    )
    version: Optional[Version] = None


class CardDetails(BaseModel):
    card: Optional[PaymentCard] = None


class PosPayment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    amount: float = Field(..., examples=[27.5], title='Amount (in cents)')
    app_fee: Optional[float] = Field(
        None,
        description='The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.',
        examples=[3],
        title='App fee',
    )
    approved: Optional[float] = Field(
        None,
        description='The initial amount of money approved for this payment.',
        examples=[37.5],
        title='Approved amount (in cents)',
    )
    bank_account: Optional[PosBankAccount] = None
    card_details: Optional[CardDetails] = None
    cash: Optional[Cash] = Field(
        None, description='Cash details for this payment', title='Cash details'
    )
    change_back_cash_amount: Optional[float] = Field(
        None, examples=[20], title='Change back cash amount (in cents)'
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Currency
    customer_id: str = Field(..., examples=['12345'])
    device_id: Optional[str] = Field(None, examples=['12345'])
    employee_id: Optional[str] = Field(None, examples=['12345'])
    external_details: Optional[ExternalDetails] = Field(
        None, description='Details about an external payment.'
    )
    external_payment_id: Optional[str] = Field(None, examples=['12345'])
    id: Optional[Id] = None
    idempotency_key: Optional[IdempotencyKey] = None
    location_id: Optional[str] = Field(None, examples=['12345'])
    merchant_id: Optional[str] = Field(None, examples=['12345'])
    order_id: str = Field(..., examples=['12345'])
    processing_fees: Optional[List[ProcessingFee]] = Field(
        None,
        examples=[
            [
                {
                    'amount': 1.05,
                    'effective_at': '2020-09-30T07:43:32.000Z',
                    'processing_type': 'initial',
                }
            ]
        ],
    )
    refunded: Optional[float] = Field(
        None,
        description='The initial amount of money approved for this payment.',
        examples=[37.5],
        title='The total amount (in cents) of the payment refunded to date.',
    )
    service_charges: Optional[ServiceCharges] = None
    source: Optional[Source1] = Field(
        None, description='Source of this payment.', examples=['external']
    )
    source_id: str = Field(
        ...,
        description='The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.',
        examples=['12345'],
    )
    status: Optional[Status5] = Field(
        None,
        description='Status of this payment.',
        examples=['approved'],
        title='Status',
    )
    tax: Optional[float] = Field(None, examples=[20], title='Tax amount (in cents)')
    tender_id: str = Field(..., examples=['12345'])
    tip: Optional[float] = Field(None, examples=[7], title='Tip amount (in cents)')
    total: Optional[float] = Field(
        None, examples=[37.5], title='Total amount (in cents)'
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    wallet: Optional[Wallet] = Field(
        None,
        description='Wallet details for this payment. This field is currently not available. Reach out to our team for more info.',
        title='Wallet details',
    )


class Tender(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    active: Optional[Active] = None
    allows_tipping: Optional[bool] = Field(
        True, description='Allow tipping on payment from tender'
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    editable: Optional[Hidden] = None
    hidden: Optional[Hidden] = None
    id: Optional[Id] = None
    key: Optional[str] = Field(None, examples=['com.clover.tender.cash'])
    label: Optional[str] = Field(None, examples=['Cash'])
    opens_cash_drawer: Optional[bool] = Field(
        True, description='If this tender opens the cash drawer'
    )
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class GetItemResponse(BaseModel):
    data: Item
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetItemsResponse(BaseModel):
    data: List[Item]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Items']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetLocationResponse(BaseModel):
    data: Location
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Locations']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetLocationsResponse(BaseModel):
    data: List[Location]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Locations']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetMerchantResponse(BaseModel):
    data: Merchant
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Merchants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetMerchantsResponse(BaseModel):
    data: List[Merchant]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Merchants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetModifierGroupResponse(BaseModel):
    data: ModifierGroup
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ModifierGroups']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetModifierGroupsResponse(BaseModel):
    data: List[ModifierGroup]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['ModifierGroups']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetModifierResponse(BaseModel):
    data: Modifier
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Modifiers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetModifiersResponse(BaseModel):
    data: List[Modifier]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Modifiers']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetOrderTypeResponse(BaseModel):
    data: OrderType
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['OrderTypes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetOrderTypesResponse(BaseModel):
    data: List[OrderType]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['OrderTypes']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetPosPaymentResponse(BaseModel):
    data: PosPayment
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['PosPayments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetPosPaymentsResponse(BaseModel):
    data: List[PosPayment]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['PosPayments']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['square']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetTenderResponse(BaseModel):
    data: Tender
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tenders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetTendersResponse(BaseModel):
    data: List[Tender]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tenders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Tender1(BaseModel):
    amount: Optional[float] = Field(None, examples=[27500], title='Amount (in cents)')
    buyer_tendered_cash_amount: Optional[int] = Field(
        None,
        description='The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.',
        examples=[27500],
    )
    card: Optional[PaymentCard] = None
    card_entry_method: Optional[CardEntryMethod] = Field(
        None,
        description='The entry method of the card. Only applicable when the tender type is card.',
        examples=['swiped'],
    )
    card_status: Optional[CardStatus] = Field(
        None,
        description='The status of the card. Only applicable when the tender type is card.',
        examples=['authorized'],
    )
    change_back_cash_amount: Optional[int] = Field(
        None,
        description='The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.',
        examples=[27500],
    )
    currency: Optional[Currency] = None
    id: Optional[Id] = None
    location_id: Optional[Id] = None
    name: Optional[str] = Field(None, examples=['10% off'])
    note: Optional[str] = Field(
        None,
        examples=[
            'An optional note associated with the tender at the time of payment.'
        ],
        title='Note',
    )
    payment_id: Optional[Id] = None
    percentage: Optional[float] = Field(None, examples=[10], title='Percentage')
    total_amount: Optional[int] = Field(
        None, examples=[27.5], title='Total amount (in cents)'
    )
    total_discount: Optional[int] = Field(
        None, examples=[3], title='Total discount (in cents)'
    )
    total_processing_fee: Optional[int] = Field(
        None, examples=[0], title='Total processing fee (in cents)'
    )
    total_refund: Optional[int] = Field(
        None, examples=[0], title='Total refund (in cents)'
    )
    total_service_charge: Optional[int] = Field(
        None, examples=[0], title='Total service charge (in cents)'
    )
    total_tax: Optional[int] = Field(
        None, examples=[2.75], title='Total tax (in cents)'
    )
    total_tip: Optional[int] = Field(None, examples=[7], title='Total tax (in cents)')
    transaction_id: Optional[Id] = None
    type: Optional[Type5] = Field(None, examples=['cash'])


class Order(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    closed_date: Optional[date] = Field(None, examples=['2022-08-13'])
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    currency: Optional[Currency] = None
    customer_id: Optional[str] = Field(None, examples=['12345'])
    customers: Optional[List[Customer]] = None
    discounts: Optional[List[Discount]] = None
    employee_id: Optional[str] = Field(None, examples=['12345'])
    fulfillments: Optional[List[Fulfillment]] = None
    id: Optional[Id] = None
    idempotency_key: Optional[IdempotencyKey] = None
    line_items: Optional[List[LineItem]] = None
    location_id: str = Field(..., examples=['12345'])
    merchant_id: str = Field(..., examples=['12345'])
    note: Optional[str] = Field(
        None,
        description='A note with information about this order, may be printed on the order receipt and displayed in apps',
        title='Note',
    )
    order_date: Optional[date] = Field(None, examples=['2022-08-12'])
    order_number: Optional[str] = Field(None, examples=['1F'])
    order_type_id: Optional[str] = Field(None, examples=['12345'])
    payment_status: Optional[PaymentStatus] = Field(
        None,
        description='Is this order paid or not?',
        examples=['open'],
        title='PosPayment status',
    )
    payments: Optional[List[Payment]] = None
    reference_id: Optional[str] = Field(
        None,
        description='An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.',
        examples=['my-order-001'],
        title='Reference ID',
    )
    refunded: Optional[bool] = Field(None, examples=[False])
    refunds: Optional[List[Refund]] = None
    seat: Optional[str] = Field(None, examples=['23F'])
    service_charges: Optional[ServiceCharges] = None
    source: Optional[Source] = Field(
        None,
        description='Source of order. Indicates the way that the order was placed.',
        examples=['api'],
    )
    status: Optional[Status4] = Field(
        None,
        description="Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()",
        examples=['open'],
        title='Status',
    )
    table: Optional[str] = Field(None, examples=['1F'])
    taxes: Optional[List[Tax]] = None
    tenders: Optional[List[Tender1]] = None
    title: Optional[str] = Field(None, title='Title')
    total_amount: Optional[int] = Field(
        None, examples=[275], title='Total amount (in cents)'
    )
    total_discount: Optional[int] = Field(
        None, examples=[300], title='Total discount (in cents)'
    )
    total_refund: Optional[int] = Field(
        None, examples=[0], title='Total refund (in cents)'
    )
    total_service_charge: Optional[int] = Field(
        None, examples=[0], title='Total service charge (in cents)'
    )
    total_tax: Optional[int] = Field(None, examples=[275], title='Total tax (in cents)')
    total_tip: Optional[int] = Field(None, examples=[700], title='Total tax (in cents)')
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    version: Optional[Version] = None
    voided: Optional[bool] = Field(None, examples=[False])
    voided_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z'], title='Updated at (timestamp)'
    )


class GetOrderResponse(BaseModel):
    data: Order
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['orders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetOrdersResponse(BaseModel):
    data: List[Order]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['orders']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['clover']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
